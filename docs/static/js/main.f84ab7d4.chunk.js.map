{"version":3,"sources":["Components/AddCategory.js","helpers/GetGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","evt","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGe,SAASA,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,cAAgB,EACdC,mBAAS,IADK,mBAC1CC,EAD0C,KAC/BC,EAD+B,KAiBjD,OACO,0BAAMC,SAZQ,SAACC,GAClBA,EAAIC,iBACDJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,OAQN,2BAAOO,KAAK,OACZC,MAAOT,EACPU,SAnBU,SAACP,GACvBF,EAAcE,EAAIQ,OAAOF,W,2BCNpBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGIA,EAAUC,OAHd,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACH,GAAMA,EAAIC,GACV,MAASD,EAAIE,MACb,cAAOF,EAAIG,cAAX,aAAO,EAAYC,iBAAiBZ,QATzB,kBAcZM,GAdY,4CAAH,sDCEL,SAASO,EAAT,GAAwC,EAAlBJ,GAAmB,IAAfC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAE5C,OACI,yBAAKc,UAAU,4CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAKA,ICFR,IAAMO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECF1B,SAAsBA,GAAW,IAAD,EACjBd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAH+B,mBACpCC,EADoC,KAC7BC,EAD6B,KAiB3C,OAXAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAIlB,IAGKC,EDb0BK,CAAa1B,GAAjCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAIrB,OACI,kBAAC,WAAD,KACI,wBAAIJ,UAAU,0CAAd,IAAyDhB,GACxDoB,GAAW,uBAAGJ,UAAU,oCAAb,WACZ,yBAAKA,UAAU,cAGPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAACK,EAAD,eACIL,IAAKA,EACLiB,IAAKjB,EAAIC,IACLD,UESjBkB,EA3BK,WAAK,MAGe1C,mBAAS,CAAC,cAHzB,mBAGd2C,EAHc,KAGF5C,EAHE,KAQtB,OACI,kBAAC,WAAD,KACI,4CACA,kBAACD,EAAD,CAAaC,cAAeA,IAC5B,6BACA,4BAEI4C,EAAWpB,KAAI,SAAAT,GAAQ,OAClB,kBAAC,EAAD,CAASA,SAAUA,EAAU2B,IAAK3B,U,MCdtD8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.f84ab7d4.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nexport default function AddCategory({setCategories}) {\r\n    const [inputValue,setInputValue] = useState('');\r\n    const handleInputChange = (evt) =>{\r\n        setInputValue(evt.target.value);\r\n    }\r\n\r\n    const handleSubmit = (evt) =>{\r\n        evt.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n        \r\n    };\r\n\r\n    return (\r\n           <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" \r\n                    value={inputValue} \r\n                    onChange={handleInputChange} />\r\n           </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    setCategories: propTypes.func.isRequired,\r\n}\r\n\r\n\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=hgybkXdYLE8CTpf54dND6vaKcJv7ib1r`;\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            'id': img.id,\r\n            'title': img.title,\r\n            'url': img.images?.downsized_medium.url\r\n\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};","import React from 'react';\r\n\r\nexport default function GifGridItem({id, title, url }) {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__backInUp\">\r\n          <img src={url} alt={title}/>\r\n          <p>{ title }</p>          \r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\nimport {getGifs} from '../helpers/GetGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n  \r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"card animate__animated animate__fadeIn\"> {category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid \">\r\n\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            img={img}\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n\r\n           \r\n        </Fragment>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport {getGifs, GetGifs} from '../helpers/GetGifs';\r\n\r\nexport default function useFetchGifs(category) {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() =>{\r\n        getGifs(category).then(imgs =>{\r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n            }); \r\n           \r\n        });\r\n    },[]);\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { Fragment,useState } from 'react';\r\nimport AddCategory from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nconst GifExpertApp =() =>{\r\n\r\n    // let categorias =['One Punch','Samurai X','Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    // const HandleAddCategory = () =>{\r\n    //     setCategories(cat => [...categories,'Hunter x Hunter']);\r\n    // };\r\n    // onClick={HandleAddCategory}\r\n   return(\r\n       <Fragment>\r\n           <h2>GifExpertApp</h2>\r\n           <AddCategory setCategories={setCategories}></AddCategory>\r\n           <hr></hr>\r\n           <ol>\r\n           {\r\n               categories.map(category=> (\r\n                    <GifGrid category={category} key={category}/>\r\n                ))\r\n           }\r\n           </ol>\r\n          \r\n            \r\n       </Fragment>\r\n   ); \r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport '../src/index.css';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}